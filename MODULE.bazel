"""Bazel Module"""

bazel_dep(name = "aspect_bazel_lib", version = "2.5.1")
bazel_dep(name = "aspect_rules_jest", version = "0.19.6")
bazel_dep(name = "aspect_rules_js", version = "1.38.0")
bazel_dep(name = "aspect_rules_swc", version = "1.1.0")
bazel_dep(name = "aspect_rules_ts", version = "2.1.1")
bazel_dep(name = "aspect_rules_webpack", version = "0.14.0")
bazel_dep(name = "bazel_skylib", version = "1.5.0")
bazel_dep(name = "buildifier_prebuilt", version = "6.4.0")
bazel_dep(name = "hermetic_cc_toolchain", version = "2.1.2")
bazel_dep(name = "rules_cc", version = "0.0.9")
bazel_dep(name = "rules_nodejs", version = "5.8.2")
bazel_dep(name = "rules_oci", version = "1.7.5")
bazel_dep(name = "rules_pkg", version = "0.10.1")
bazel_dep(name = "rules_pycross", version = "0.5.3")
bazel_dep(name = "rules_python", version = "0.29.0")
bazel_dep(name = "rules_rust", version = "0.42.1")

# C/C++ toolchain
cc = use_extension("@hermetic_cc_toolchain//toolchain:ext.bzl", "toolchains")
use_repo(
    cc,
    cc_toolchains = "zig_sdk",
)

register_toolchains("@cc_toolchains//toolchain:all")

# Rust toolchain
rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(
    edition = "2021",
    extra_target_triples = [
        "aarch64-unknown-linux-gnu",
        "x86_64-unknown-linux-gnu",
    ],
    versions = ["1.75.0"],
)
use_repo(rust, "rust_toolchains")

register_toolchains(
    "@rust_toolchains//:all",
)

crate = use_extension(
    "@rules_rust//crate_universe:extension.bzl",
    "crate",
)
crate.from_cargo(
    name = "crates",
    cargo_lockfile = "//:Cargo.lock",
    manifests = [
        "//:Cargo.toml",
        "//examples/rust:Cargo.toml",
    ],
)
use_repo(crate, "crates")

# Python toolchain
python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    is_default = True,
    python_version = "3.11",
)

env = use_extension("@rules_pycross//pycross/extensions:environments.bzl", "environments")
use_repo(env, "pycross_environments")

lock_import = use_extension("@rules_pycross//pycross/extensions:lock_import.bzl", "lock_import")
lock_import.import_poetry(
    lock_file = "//:poetry.lock",
    project_file = "//:pyproject.toml",
    repo = "pip",
)

lock_repos = use_extension("@rules_pycross//pycross/extensions:lock_repos.bzl", "lock_repos")
use_repo(lock_repos, "pip")

# OCI toolchain
oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")
use_repo(oci, "oci_crane_registry_toolchains", "oci_crane_toolchains")

register_toolchains("@oci_crane_toolchains//:all", "@oci_crane_registry_toolchains//:all")

oci.pull(
    name = "distroless_base",
    digest = "sha256:2482afe69bed977063bfe29ac52bc3ef1a11b6794e3b28539bc91d7b9c2fcb7d",
    image = "gcr.io/distroless/base",
    platforms = [
        "linux/amd64",
        "linux/arm64/v8",
    ],
)
oci.pull(
    name = "ubuntu",
    digest = "sha256:67211c14fa74f070d27cc59d69a7fa9aeff8e28ea118ef3babc295a0428a6d21",
    image = "ubuntu",
    platforms = [
        "linux/amd64",
        "linux/arm64/v8",
    ],
)
use_repo(oci, "distroless_base", "ubuntu")

# Node JS toolachin
node = use_extension("@rules_nodejs//nodejs:extensions.bzl", "node")
node.toolchain(node_version = "16.14.2")

pnpm = use_extension("@aspect_rules_js//npm:extensions.bzl", "pnpm", dev_dependency = True)
use_repo(pnpm, "pnpm")

npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm", dev_dependency = True)
npm.npm_translate_lock(
    name = "npm",
    npmrc = "//:.npmrc",
    pnpm_lock = "//:pnpm-lock.yaml",
    public_hoist_packages = {
        "@next/eslint-plugin-next": ["examples/js/next"],
    },
    verify_node_modules_ignored = "//:.bazelignore",
)
use_repo(npm, "npm")

rules_ts_ext = use_extension(
    "@aspect_rules_ts//ts:extensions.bzl",
    "ext",
    dev_dependency = True,
)
rules_ts_ext.deps()
use_repo(rules_ts_ext, "npm_typescript")
